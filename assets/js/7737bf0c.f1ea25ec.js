"use strict";(self.webpackChunkuserdocs=self.webpackChunkuserdocs||[]).push([[428],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return p}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=c(n),p=a,g=m["".concat(u,".").concat(p)]||m[p]||d[p]||o;return n?r.createElement(g,i(i({ref:t},s),{},{components:n})):r.createElement(g,i({ref:t},s))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},778:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return s},default:function(){return m}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],l={},u="Container Image Creation for MicroVM usage",c={unversionedId:"getting-started/extras/image-creation",id:"getting-started/extras/image-creation",title:"Container Image Creation for MicroVM usage",description:"These are temporary instructions on how to create container images for use by the microVM as a source for:",source:"@site/docs/getting-started/extras/image-creation.md",sourceDirName:"getting-started/extras",slug:"/getting-started/extras/image-creation",permalink:"/docs/getting-started/extras/image-creation",editUrl:"https://github.com/weaveworks/flintlock/edit/main/userdocs/docs/getting-started/extras/image-creation.md",tags:[],version:"current",frontMatter:{},sidebar:"gettingStartedSidebar",previous:{title:"Interacting with the service",permalink:"/docs/getting-started/basics/interacting-with-the-service"},next:{title:"Use Vagrant",permalink:"/docs/getting-started/extras/use-vagrant"}},s=[{value:"Setup",id:"setup",children:[],level:2},{value:"Building a volume container image",id:"building-a-volume-container-image",children:[],level:2},{value:"Building a Kernel/Initrd container image",id:"building-a-kernelinitrd-container-image",children:[],level:2}],d={toc:s};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"container-image-creation-for-microvm-usage"},"Container Image Creation for MicroVM usage"),(0,o.kt)("p",null,"These are temporary instructions on how to create container images for use by the microVM as a source for:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Volumes"),(0,o.kt)("li",{parentName:"ul"},"Kernel"),(0,o.kt)("li",{parentName:"ul"},"Initrd")),(0,o.kt)("h2",{id:"setup"},"Setup"),(0,o.kt)("p",null,"Run the following command to download the Ubuntu Server cloud images:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"hack/scripts/download_cloudimages.sh\n")),(0,o.kt)("p",null,"This downloads the Ubuntu Server Cloud Image files and and processes them. The downloaded files and processed files will be available in ",(0,o.kt)("inlineCode",{parentName:"p"},"out/images")," by default. There are a number of flags that can be used for custimization:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Flag"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"-o/--output"),(0,o.kt)("td",{parentName:"tr",align:null},"Specifies the output folder to use. Defaults to ",(0,o.kt)("inlineCode",{parentName:"td"},"./out"),".")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"-v/--version"),(0,o.kt)("td",{parentName:"tr",align:null},"Specifies the ubuntu version to download. Defaults to ",(0,o.kt)("inlineCode",{parentName:"td"},"bionic"),".")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"-s/--image-size"),(0,o.kt)("td",{parentName:"tr",align:null},"Specifies the size of the root fs to create. Defaluts to ",(0,o.kt)("inlineCode",{parentName:"td"},"10G"),".")))),(0,o.kt)("p",null,"The processed files (i.e. root filesystem, uncompressed kernel, initrd) can be used directly with Firecracker without flintlock."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"As an alternative using the download script you can use ",(0,o.kt)("a",{parentName:"p",href:"https://wiki.debian.org/Debootstrap"},"debootstrap")," by running ",(0,o.kt)("inlineCode",{parentName:"p"},"sudo debootstrap bionic ./out/images/mount > /dev/null"),". The commands in the following sections may need to be adapted.")),(0,o.kt)("h2",{id:"building-a-volume-container-image"},"Building a volume container image"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Run the following to mount the downloaded and processed root filesystem:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"mkdir -p out/images/mount\nsudo mount -o loop out/images/bionic/bionic.rootfs ./out/images/mount\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Run the following to create the container image (replacing ",(0,o.kt)("inlineCode",{parentName:"li"},"myorg/ubuntu-bionic-volume:v0.0.1")," with your required container image name/tag):")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"sudo tar -C ./out/images/mount -c . | docker import - myorg/ubuntu-bionic-volume:v0.0.1\ndocker push myorg/ubuntu-bionic-volume:v0.0.1\n")),(0,o.kt)("h2",{id:"building-a-kernelinitrd-container-image"},"Building a Kernel/Initrd container image"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create a Dockerfile that adds the uncompressed kernel and initrd. For example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dockerfile"},"FROM scratch\n\nCOPY vmlinux initrd-generic /\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Use docker build and then push")))}m.isMDXComponent=!0}}]);