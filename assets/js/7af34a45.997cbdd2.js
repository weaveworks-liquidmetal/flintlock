"use strict";(self.webpackChunkuserdocs=self.webpackChunkuserdocs||[]).push([[94],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,k=u["".concat(l,".").concat(m)]||u[m]||p[m]||i;return n?r.createElement(k,o(o({ref:t},d),{},{components:n})):r.createElement(k,o({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9575:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var r=n(3117),a=n(102),i=(n(7294),n(3905)),o=["components"],s={sidebar_position:1},l="Configure network",c={unversionedId:"getting-started/basics/configuring-network",id:"getting-started/basics/configuring-network",title:"Configure network",description:"Flintlock is only compatible with Linux. We recommend that",source:"@site/docs/getting-started/basics/configuring-network.md",sourceDirName:"getting-started/basics",slug:"/getting-started/basics/configuring-network",permalink:"/docs/getting-started/basics/configuring-network",editUrl:"https://github.com/weaveworks/flintlock/edit/main/userdocs/docs/getting-started/basics/configuring-network.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"gettingStartedSidebar",previous:{title:"Introduction",permalink:"/docs/intro"},next:{title:"Containerd",permalink:"/docs/getting-started/basics/containerd"}},d={},p=[{value:"Install packages and start <code>libvirtd</code>",id:"install-packages-and-start-libvirtd",level:2},{value:"Create kvm network",id:"create-kvm-network",level:2},{value:"Create and connect tap device",id:"create-and-connect-tap-device",level:2}],u={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"configure-network"},"Configure network"),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Flintlock is only compatible with Linux. We recommend that\nnon-linux users provision a ",(0,i.kt)("a",{parentName:"p",href:"../extras/use-vagrant"},"Linux VM")," in which to work."))),(0,i.kt)("p",null,'If you are using a wired connection, you can skip this and jump straight to the "Containerd" section.'),(0,i.kt)("p",null,"If you are using a wireless adapter, macvtap cannot be used normally. The workaround is to use a bridge and tap devices instead."),(0,i.kt)("p",null,'You can use the default kvm network, in this case, skip to "Create and connect tap device" and use ',(0,i.kt)("inlineCode",{parentName:"p"},"default"),". However, we recommend using a dedicated network to avoid interference from other kvm machines or processes like IP or MAC address conflict."),(0,i.kt)("h2",{id:"install-packages-and-start-libvirtd"},"Install packages and start ",(0,i.kt)("inlineCode",{parentName:"h2"},"libvirtd")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt install qemu qemu-kvm libvirt-clients libvirt-daemon-system virtinst bridge-utils\n\nsudo systemctl enable libvirtd\nsudo systemctl start libvirtd\n")),(0,i.kt)("h2",{id:"create-kvm-network"},"Create kvm network"),(0,i.kt)("p",null,"Create the ",(0,i.kt)("inlineCode",{parentName:"p"},"flintlock.xml")," file (feel free to change the IP range):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<network>\n  <name>flintlock</name>\n  <forward mode='nat'>\n    <nat>\n      <port start='1024' end='65535'/>\n    </nat>\n  </forward>\n  <bridge name='flkbr0' stp='on' delay='0'/>\n  <ip address='192.168.100.1' netmask='255.255.255.0'>\n    <dhcp>\n      <range start='192.168.100.2' end='192.168.100.254'/>\n    </dhcp>\n  </ip>\n</network>\n")),(0,i.kt)("p",null,"Define, start and set autostart on the ",(0,i.kt)("inlineCode",{parentName:"p"},"flintlock")," network:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo virsh net-define flintlock.xml\nsudo virsh net-start flintlock\nsudo virsh net-autostart flintlock\n")),(0,i.kt)("p",null,"Now you should see the network in the network list:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"virsh net-list\n Name       State    Autostart   Persistent\n---------------------------------------------\n default    active   yes         yes\n flintlock   active   yes         yes\n")),(0,i.kt)("h2",{id:"create-and-connect-tap-device"},"Create and connect tap device"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"tapName=tap0\nbridge=flkbr0\nsudo ip tuntap add ${tapName} mode tap\nsudo ip link set ${tapName} master ${bridge} up\n")),(0,i.kt)("p",null,"Check with ",(0,i.kt)("inlineCode",{parentName:"p"},"ip link ls"),"."),(0,i.kt)("p",null,"You can add a function into your bashrc/zshrc:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"function vir-new-tap() {\n  tapName=${1:=tap0}\n  bridge=${2:=flkbr0}\n\n  sudo ip tuntap add ${tapName} mode tap\n  sudo ip link set ${tapName} master ${bridge} up\n}\n")),(0,i.kt)("p",null,"You can check the DHCP leases with ",(0,i.kt)("inlineCode",{parentName:"p"},"virsh"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo virsh net-dhcp-leases default\n")))}m.isMDXComponent=!0}}]);